'Account creation' = "10/16/2018",
'Source' = "App - Survey (Inapp)",
'Contact?' = "No contact"
)
)
),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/6f5a9e5f09dd4eacb11bf597063fb557/services/bf8e500b88904ac69cea8bf71dcc3559/execute?api-version=2.0&format=swagger",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req =  list(
Inputs = list(
"input1"= list(
list(
'User name' = "1",
'Birthdate' = "1993-04-26T00:00:00Z",
'Gender' = "female",
'City' = "Tasikmalaya",
'Account creation' = "10/16/2018",
'Source' = "App - Survey (Inapp)",
'Contact?' = "No contact"
)
)
),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "l6RW1uQc/saVJQp3V1HcxxQ42AKwxIq4f+DRr2jGic28PPIuN8pl9fqb9clEM1eedy/fjToSPJ6HlzWvaT17Ew==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/6f5a9e5f09dd4eacb11bf597063fb557/services/bf8e500b88904ac69cea8bf71dcc3559/execute?api-version=2.0&format=swagger",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req =  list(
Inputs = list(
"input1"= list(
list(
'User name' = "1",
'Birthdate' = "1993-04-26T00:00:00Z",
'Gender' = "female",
'City' = "Tasikmalaya",
'Account creation' = "10/16/2018",
'Source' = "App - Survey (Inapp)",
'Contact?' = "No contact"
)
)
),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "l6RW1uQc/saVJQp3V1HcxxQ42AKwxIq4f+DRr2jGic28PPIuN8pl9fqb9clEM1eedy/fjToSPJ6HlzWvaT17Ew==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/6f5a9e5f09dd4eacb11bf597063fb557/services/bf8e500b88904ac69cea8bf71dcc3559/execute?api-version=2.0&format=swagger",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
req =  list(
Inputs = list(
"input1"= list(
list(
'User name' = "234",
'Birthdate' = "1993-04-26T00:00:00Z",
'Gender' = "male",
'City' = "Tasikmalaya",
'Account creation' = "10/16/2018",
'Source' = "App - Survey (Inapp)",
'Contact?' = "contact"
)
)
),
GlobalParameters = setNames(fromJSON('{}'), character(0))
)
body = enc2utf8(toJSON(req))
api_key = "l6RW1uQc/saVJQp3V1HcxxQ42AKwxIq4f+DRr2jGic28PPIuN8pl9fqb9clEM1eedy/fjToSPJ6HlzWvaT17Ew==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/6f5a9e5f09dd4eacb11bf597063fb557/services/bf8e500b88904ac69cea8bf71dcc3559/execute?api-version=2.0&format=swagger",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
seq(ymd('2012-04-07'),ymd('2013-03-22'), by = '1 week')
??seq.POSIXt
120/300
dataset_00_with_header <- read.csv("D:/Rajib Documents/MEGAsync/My Jobs/Data Scientist Test/Data Scientist Test/Example_Data_for_Data_Scientist_Position/dataset_00_with_header.csv", header=FALSE, dec=",")
View(dataset_00_with_header)
dataset_00_with_header <- read.csv("D:/Rajib Documents/MEGAsync/My Jobs/Data Scientist Test/Data Scientist Test/Example_Data_for_Data_Scientist_Position/dataset_00_with_header.csv", header=T, dec=",")
View(dataset_00_with_header)
str(dataset_00_with_header)
View(dataset_00_with_header)
View(dataset_00_with_header)
View(dataset_00_with_header)
library(shiny); runApp('D:/Rajib Documents/MEGAsync/RShiny practice/app-itcher.R')
library(shiny); runApp('D:/Rajib Documents/MEGAsync/RShiny practice/app-itcher.R')
engagement_tracking <- read.csv("D:/Rajib Documents/MEGAsync/Itcher/shiny app/engagement_tracking.csv")
View(engagement_tracking)
View(engagement_tracking)
View(engagement_tracking)
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
engagement_tracking <- read.csv("D:/Rajib Documents/MEGAsync/Itcher/shiny app/engagement_tracking.csv")
engagement_tracking <- read.csv("D:/Rajib Documents/MEGAsync/Itcher/shiny app/engagement_tracking1.csv")
str(engagement_tracking)
engagement_tracking <- read.csv("D:/Rajib Documents/MEGAsync/Itcher/shiny app/engagement_tracking1.csv")
engagement_tracking <- as.Date(engagement_tracking, format = "%m/%d/%Y")
engagement_tracking <- as.Date(engagement_tracking$engagement_timestamp, format = "%m/%d/%Y")
engagement_tracking$engagement_timestamp <- as.Date(engagement_tracking$engagement_timestamp, format = "%m/%d/%Y")
engagement_tracking <- read.csv("D:/Rajib Documents/MEGAsync/Itcher/shiny app/engagement_tracking1.csv")
engagement_tracking$engagement_timestamp <- as.Date(engagement_tracking$engagement_timestamp, format = "%m/%d/%Y")
View(engagement_tracking)
View(engagement_tracking)
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
runApp('D:/Rajib Documents/MEGAsync/Itcher/shiny app/app-itcher.R')
NonOwner_Accuracy_Report_Details_Utilities <- read.delim2("D:/Stock_Prediction/Non_Owner/21_feb_2019/21_feb_2019/NonOwner_Accuracy_Report_Details_Utilities.csv")
View(NonOwner_Accuracy_Report_Details_Utilities)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
NonOwner_Accuracy_Report_Details_Financials <- read.csv("D:/Stock_Prediction/Non_Owner/21_feb_2019/21_feb_2019/NonOwner_Accuracy_Report_Details_Financials.csv", sep=";")
View(NonOwner_Accuracy_Report_Details_Financials)
library(readr)
NonOwner_Accuracy_Report_Details_Utilities <- read_csv("D:/Stock_Prediction/Non_Owner/21_feb_2019/21_feb_2019/NonOwner_Accuracy_Report_Details_Utilities.csv")
View(NonOwner_Accuracy_Report_Details_Utilities)
NonOwner_Accuracy_Report_Details_Financials <- read.csv("D:/Stock_Prediction/Non_Owner/21_feb_2019/21_feb_2019/NonOwner_Accuracy_Report_Details_Financials.csv", sep="|")
View(NonOwner_Accuracy_Report_Details_Financials)
View(NonOwner_Accuracy_Report_Details_Financials)
View(NonOwner_Accuracy_Report_Details_Utilities)
View(NonOwner_Accuracy_Report_Details_Utilities)
View(NonOwner_Accuracy_Report_Details_Utilities)
NonOwner_Accuracy_Report_Details_Financials <- read.csv("D:/Stock_Prediction/Non_Owner/21_feb_2019/21_feb_2019/NonOwner_Accuracy_Report_Details_Financials.csv", sep="|")
View(NonOwner_Accuracy_Report_Details_Financials)
View(NonOwner_Accuracy_Report_Details_Financials)
View(NonOwner_Accuracy_Report_Details_Financials)
compare <- read.csv("D:/Stock_Prediction/Non_Owner/2018Q_Final_NonOwner_Sectorwise_Report/overall report/compare.csv")
View(compare)
#for reproducing
set.seed(200)
#simple example. Assume your data is simple binomial variable with probability 0.3
data <- data.frame(time = 1:200, val=sample(c(0,1), size = 200, replace = T, prob = c(0.3, 0.7)))
#plot using ggplot and add linear regression and confidence interval
ggplot(data, aes(x = time, y=val)) + geom_smooth(method=lm) +geom_point()
#Now we can try to create linear regression
y = data$time
x = data$val
fitData <- lm(x ~ y)
predict(fitData, newdata = data.frame(y=201:224), interval="confidence")
View(data)
View(engagement_tracking)
#plot using ggplot and add linear regression and confidence interval
ggplot(data, aes(x = time, y=val)) + geom_smooth(method=lm) +geom_point()
library(ggplot2)
#for reproducing
set.seed(200)
#simple example. Assume your data is simple binomial variable with probability 0.3
data <- data.frame(time = 1:200, val=sample(c(0,1), size = 200, replace = T, prob = c(0.3, 0.7)))
#plot using ggplot and add linear regression and confidence interval
ggplot(data, aes(x = time, y=val)) + geom_smooth(method=lm) +geom_point()
#Now we can try to create linear regression
y = data$time
#Now we can try to create linear regression
y = data$time
x = data$val
fitData <- lm(x ~ y)
predict(fitData, newdata = data.frame(y=201:224), interval="confidence")
summary(fitData)
fitData <- lm(log(x) ~ log(y)
>>
fitData <- lm(log(x) ~ log(y))
View(data)
pred = predict(fitData, newdata = data.frame(y=201:224), interval="confidence")
View(pred)
rm(list=ls())
install.packages("HIBITS")
library(ggplot2)
#for reproducing
set.seed(200)
#simple example. Assume your data is simple binomial variable with probability 0.3
data <- data.frame(time = 1:200, val=sample(c(0,1), size = 200, replace = T, prob = c(0.3, 0.7)))
#plot using ggplot and add linear regression and confidence interval
ggplot(data, aes(x = time, y=val)) + geom_smooth(method=lm) +geom_point()
#Now we can try to create linear regression
y = data$time
x = data$val
fitData <- glm(x ~ y)
pred = predict(fitData, newdata = data.frame(y=201:224), interval="confidence")
pred
View(pred)
library("AzureML")
ws <- workspace(
id = "56ef3c02895049498638217488e95cba",
auth = "yPLVCEcd70IFMY6u3S3ZH9F2qAvK7DfCxREKpuntjR6DIqHl3HImn7mBqxEfVlpsYYj/PnliTgQWtjIb6eR46A==",
api_endpoint = "https://studioapi.azureml.net"
)
ds <- download.intermediate.dataset(
ws = ws,
node_id = "1ffaef13-92db-42a0-9521-7ade6de1e350-5267",
experiment = "56ef3c02895049498638217488e95cba.f-id.d6f6b8c950784852be287581ec410795",
port_name = "Results dataset",
data_type_id = "GenericCSV"
)
head(ds)
View(ds)
View(ds)
library(randomForest)
rfNews()
??randomForest
rm(list = ls())
################
#data1=read.csv(file.choose())
data1= read.csv("C:\\Users\\datacore\\Dropbox\\GlobalStat Analytics\\Client Proposal\\Awam A\\brexit since_2017-03-01 until_2017-03-19.csv")
data_loc=data.frame(data1$Location.Name)
names(data_loc)=c("loc")
data_loc[data_loc==""] <- NA
data1_loc <-as.data.frame(na.omit(data_loc))
View(data1_loc)
View(data1_loc)
View(data1)
View(data1)
library(dplyr)
data2_loc=data1_loc %>% distinct(loc)
data3_loc=as.data.frame(data1_loc[!duplicated(data1_loc), ])
names(data3_loc)=c("loc")
library(ggmap)
install.packages("ggmap")
library(ggmap)
library(maps)
install.packages("maps")
library(maps)
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
?register_google
register_google(key = "
AIzaSyAoS6KlEOp5MJyTtlratPpQIdVY1CI3BJU")
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
cities1=cbind(data2_loc, lonlat)
register_google(key = "AIzaSyAoS6KlEOp5MJyTtlratPpQIdVY1CI3BJU")
lonlat <- geocode(unique(data1_loc$loc))
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
cities1=cbind(data2_loc, lonlat)
View(cities1)
View(cities1)
register_google(key = "AIzaSyBbNMS3HBKRSeYaRl80Kwp2VJiPuDY4ePM")
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
register_google(key = "AIzaSyAli3hVc7gu8Nx3XF3owJCipUseyeXFYds")
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
register_google(key = "AIzaSyAli3hVc7gu8Nx3XF3owJCipUseyeXFYds")
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
register_google(key = "
AIzaSyBCQor-XWhis9P9f2-yzKYfrGXSGK3Y14s")
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
register_google(key = "AIzaSyAq4OODdW-DPoyn7LxPXci1NBP1ytNvXSw")
#lonlat <- geocode(unique(data1_loc$loc))
lonlat= geocode(as.character(data2_loc$loc))
##memory clear
rm(list = ls())
#Set working directory To Project Directory
setwd("E:\\UpWork\\Twitter Sentiment Analysis in R")
#loading library
library(data.table)
Data <- fread("realDonaldTrump\\realDonaldTrump.csv")
#Set working directory To Project Directory
setwd("E:\\UpWork\\Twitter Sentiment Analysis in R")
#required library
library("twitteR")
library("wordcloud")
library("tm")
library("plyr")
##memory clear
rm(list = ls())
#Set working directory To Project Directory
setwd("D:\\Rajib Documents\\MEGAsync\\MEGAsync\\UpWork\\Twitter&data_analysis\\R code")
#required library
library("twitteR")
library("wordcloud")
library("tm")
library("plyr")
#Set working directory To Project Directory
setwd("D:\\Rajib Documents\\MEGAsync\\MEGAsync\\UpWork\\Twitter&data_analysis\\R code")
library(plyr)        # to break big problem into smaller
library(stringr)     # make easier to work with strings
library(ROAuth)
requestURL <-  "https://api.twitter.com/oauth/request_token"
accessURL <-  "https://api.twitter.com/oauth/access_token"
authURL <-  "https://api.twitter.com/oauth/authorize"
consumerKey <-  "HaJjtqjOVhPvAKpIJ240UdoDB"
consumerSecret <-  "GL7qOAXs18KwGyAaymuaBaesGTWJ2fBxnjq5z1XRg9yQqAmeQT"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
## run this line and go to the URL that appears on screen
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
## run this line and go to the URL that appears on screen
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
#Set working directory To Project Directory
setwd("D:\\Rajib Documents\\MEGAsync\\UpWork\\Twitter&data_analysis\\R code")
library(plyr)        # to break big problem into smaller
library(stringr)     # make easier to work with strings
library(ROAuth)
requestURL <-  "https://api.twitter.com/oauth/request_token"
accessURL <-  "https://api.twitter.com/oauth/access_token"
authURL <-  "https://api.twitter.com/oauth/authorize"
consumerKey <-  "HaJjtqjOVhPvAKpIJ240UdoDB"
consumerSecret <-  "GL7qOAXs18KwGyAaymuaBaesGTWJ2fBxnjq5z1XRg9yQqAmeQT"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
## run this line and go to the URL that appears on screen
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
##memory clear
rm(list = ls())
#required library
library("twitteR")
library("wordcloud")
library("tm")
library("plyr")
#Set working directory To Project Directory
setwd("D:\\Rajib Documents\\MEGAsync\\UpWork\\Twitter&data_analysis\\R code")
library(plyr)        # to break big problem into smaller
library(stringr)     # make easier to work with strings
library(ROAuth)
requestURL <-  "https://api.twitter.com/oauth/request_token"
accessURL <-  "https://api.twitter.com/oauth/access_token"
authURL <-  "https://api.twitter.com/oauth/authorize"
consumerKey <-  "3eOl9JdpI5jI95Zuk9DvsND2U"
consumerSecret <-  "RIrJ2YwhHB0kc5ChsOln6SaCLr8F5efbwyc5V5go6lRbfypZDh"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
## run this line and go to the URL that appears on screen
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
accessToken = '806201386740416514-wGkYikTkW385jTdXOVkOgMlyyLmJzCR'
accessSecret = 'Yacf8RVeyzfGiH32z90WEJJ0WiHPyeUVBfgrwRjQIyeCT'
## testing that it works
library(twitteR)
setup_twitter_oauth(consumer_key=consumerKey, consumer_secret=consumerSecret,
access_token=accessToken, access_secret=accessSecret)
tweets<-searchTwitter('#narendramodi', n =10000, lang="en", since='2014-03-01', until='2018-05-15')
tweets<-searchTwitter('#apple', n =10000, lang="en", since='2014-03-01', until='2018-05-15')
tweets<-searchTwitter('#apple', n =10000, lang="en")
tweets_df <- twListToDF(tweets)
View(tweets_df)
View(tweets_df)
tweets<-searchTwitter('#rajibstats', n =10000, lang="en", since='2014-03-01', until='2018-15-05')
tweets<-searchTwitter('#thirdeyedata', n =10000, lang="en", since='2014-03-01', until='2018-15-05')
tweets<-searchTwitter('#hu', n =10000, lang="en", since='2014-03-01', until='2018-15-05')
tweets<-searchTwitter('#tmc', n =10000, lang="en", since='2014-03-01', until='2018-15-05')
tweets<-searchTwitter('#bjp', n =10000, lang="en", since='2014-03-01', until='2018-15-05')
tweets<-searchTwitter('#cnn', n =10000, lang="en", since='2014-03-01', until='2018-15-05')
tweets<-searchTwitter('cnn', n =10000, lang="en", since='2014-03-01', until='2018-15-05')
tweets<-searchTwitter('#apple', n =10000, lang="en", since='2018-03-01', until='2018-15-04')
tweets<-searchTwitter('#apple', n =10000, lang="en", since='2018-03-01', until='2018-15-05')
tweets<-searchTwitter('#apple', n =10000, lang="en", since='2014-03-01', until='2018-15-04')
tweets<-searchTwitter('charlie sheen', n =10000, lang="en")
tweets<-searchTwitter('charlie sheen', n =100, lang="en")
tweets_df <- twListToDF(tweets)
View(tweets_df)
View(tweets_df)
tweets<-searchTwitter('world cup', n =500, lang="en")
tweets_df <- twListToDF(tweets)
View(tweets_df)
tweets<-searchTwitter('#apple', n =5000, lang="en")
tweets_df <- twListToDF(tweets)
View(tweets_df)
?searchTwitter
tweets<-searchTwitter('#apple', n =5000, lang="en",locations = c(-180, -90, 180, 90))
library(ROAuth)
requestURL <-  "https://api.twitter.com/oauth/request_token"
accessURL <-  "https://api.twitter.com/oauth/access_token"
authURL <-  "https://api.twitter.com/oauth/authorize"
consumerKey <-  "3eOl9JdpI5jI95Zuk9DvsND2U"
consumerSecret <-  "RIrJ2YwhHB0kc5ChsOln6SaCLr8F5efbwyc5V5go6lRbfypZDh"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
## run this line and go to the URL that appears on screen
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
consumerKey <-  "3eOl9JdpI5jI95Zuk9DvsND2U"
consumerSecret <-  "RIrJ2YwhHB0kc5ChsOln6SaCLr8F5efbwyc5V5go6lRbfypZDh"
my_oauth <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret, requestURL=requestURL,
accessURL=accessURL, authURL=authURL)
## run this line and go to the URL that appears on screen
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
accessToken = '806201386740416514-wGkYikTkW385jTdXOVkOgMlyyLmJzCR'
accessSecret = 'Yacf8RVeyzfGiH32z90WEJJ0WiHPyeUVBfgrwRjQIyeCT'
## testing that it works
library(twitteR)
setup_twitter_oauth(consumer_key=consumerKey, consumer_secret=consumerSecret,
access_token=accessToken, access_secret=accessSecret)
tweets<-searchTwitter('#apple', n =5000, lang="en",locations = c(-180, -90, 180, 90))
tweets<-searchTwitter('#apple', n =5000, lang="en",geocode = c(-180, -90, 180, 90))
tweets<-searchTwitter('#apple', n =5000, lang="en")
tweetFrame <- twListToDF(tweets)
userInfo <- lookupUsers(tweetFrame$screenName)  # Batch lookup of user info
View(tweets_df)
userFrame <- twListToDF(userInfo)  # Convert to a nice dF
View(userFrame)
locatedUsers <- !is.na(userFrame$location)  # Keep only users with location info
locations <- geocode(userFrame$location[locatedUsers])  # Use amazing API to guess
View(locations)
View(locations)
install.packages("greta")
library(greta)
library(greta)
sessionInfo()
